let scoresData;let sortOrder="down";const sc_subDateColumn=0;const sc_statusColumn=1;const sc_nameColumn=2;const sc_levelColumn=3;const sc_scoreColumn=4;const sc_goldColumn=5;const sc_proofColumn=6;const sc_userDateColumn=7;const sc_numOfMutsColumn=8;const sc_versionColumn=9;const sc_weaponColumn=10;const sc_usedMutsColumn=11;const sc_usedPerksColumn=12;const sc_notesColumn=13;const sc_subIDColumn=14;const sc_sudIndexColumn=50;const sc_positionColumn=51;async function GetSubData(){const CSVresponse=await GetScoresData();const ParseCSV=await CSVToArray(CSVresponse,",");scoresData=await ParseCSV;SortSubData()}let sc_NeulandSubsScor=[];let sc_NordfelsSubs=[];let sc_DurststeinSubs=[];let sc_FrostseeSubsa=[];let sc_UferWindSubs=[];let sc_SturmklammSubs=[];let eTrialsS1Subs=[];let sc_etTrialsSubs=[];let sc_canShowTableData=false;function SortSubData(){let chosenRow;let acceptedSubs=[];let acceptedSubsNumber=0;let eTrialsS1SubNumber=0;for(let i=0;i<scoresData.length;i+=1){chosenRow=scoresData[i];chosenRow[sc_sudIndexColumn]=i;if(chosenRow[sc_statusColumn]=="a"){acceptedSubs[acceptedSubsNumber]=chosenRow;acceptedSubsNumber+=1}else if(chosenRow[sc_statusColumn]=="s1-a"){eTrialsS1Subs[eTrialsS1SubNumber]=chosenRow;eTrialsS1SubNumber+=1}}let NLSubNum=0;let NFSubNum=0;let DSSubNum=0;let FSSubNum=0;let UFSubNum=0;let SKSubNum=0;let etSubNum=0;for(let i=0;i<acceptedSubs.length;i+=1){chosenRow=acceptedSubs[i];level=chosenRow[sc_levelColumn];switch(level){default:console.error("SortSubData | \"level\" value: "+chosenRow+" is unknown.");break;case "Neuland":sc_NeulandSubsScor[NLSubNum]=chosenRow;NLSubNum+=1;break;case "Nordfels":sc_NordfelsSubs[NFSubNum]=chosenRow;NFSubNum+=1;break;case "Durststein":sc_DurststeinSubs[DSSubNum]=chosenRow;DSSubNum+=1;break;case "Durststein":sc_DurststeinSubs[DSSubNum]=chosenRow;DSSubNum+=1;break;case "Frostsee":sc_FrostseeSubsa[FSSubNum]=chosenRow;FSSubNum+=1;break;case "Uferwind":sc_UferWindSubs[UFSubNum]=chosenRow;UFSubNum+=1;break;case "Sturmklamm":sc_SturmklammSubs[SKSubNum]=chosenRow;SKSubNum+=1;break;case "EternalTrials":sc_etTrialsSubs[etSubNum]=chosenRow;etSubNum+=1;break}}sc_NeulandSubsScor.sort((a,b)=>parseInt(b[sc_scoreColumn])-parseInt(a[sc_scoreColumn]));sc_NordfelsSubs.sort((a,b)=>parseInt(b[sc_scoreColumn])-parseInt(a[sc_scoreColumn]));sc_DurststeinSubs.sort((a,b)=>parseInt(b[sc_scoreColumn])-parseInt(a[sc_scoreColumn]));sc_FrostseeSubsa.sort((a,b)=>parseInt(b[sc_scoreColumn])-parseInt(a[sc_scoreColumn]));sc_UferWindSubs.sort((a,b)=>parseInt(b[sc_scoreColumn])-parseInt(a[sc_scoreColumn]));sc_SturmklammSubs.sort((a,b)=>parseInt(b[sc_scoreColumn])-parseInt(a[sc_scoreColumn]));sc_etTrialsSubs.sort((a,b)=>parseInt(b[sc_scoreColumn])-parseInt(a[sc_scoreColumn]));eTrialsS1Subs.sort((a,b)=>parseInt(b[sc_scoreColumn])-parseInt(a[sc_scoreColumn]));for(let i=0;i<sc_NeulandSubsScor.length;i+=1){chosenRow=sc_NeulandSubsScor[i];chosenRow[sc_positionColumn]=i+1}for(let i=0;i<sc_NordfelsSubs.length;i+=1){chosenRow=sc_NordfelsSubs[i];chosenRow[sc_positionColumn]=i+1}for(let i=0;i<sc_DurststeinSubs.length;i+=1){chosenRow=sc_DurststeinSubs[i];chosenRow[sc_positionColumn]=i+1}for(let i=0;i<sc_FrostseeSubsa.length;i+=1){chosenRow=sc_FrostseeSubsa[i];chosenRow[sc_positionColumn]=i+1}for(let i=0;i<sc_UferWindSubs.length;i+=1){chosenRow=sc_UferWindSubs[i];chosenRow[sc_positionColumn]=i+1}for(let i=0;i<sc_SturmklammSubs.length;i+=1){chosenRow=sc_SturmklammSubs[i];chosenRow[sc_positionColumn]=i+1}for(let i=0;i<sc_etTrialsSubs.length;i+=1){chosenRow=sc_etTrialsSubs[i];chosenRow[sc_positionColumn]=i+1}for(let i=0;i<eTrialsS1Subs.length;i+=1){chosenRow=eTrialsS1Subs[i];chosenRow[sc_positionColumn]=i+1}sc_canShowTableData=true;LeaderBoarReadyEvent();}function ChangeTableData(level){if(!sc_canShowTableData){return}HideLevelNameColumn();document.getElementById("leaderboardContent").outerHTML=document.getElementById("leaderboardContent").outerHTML;let chosenArray;let chosenMap=level;switch(chosenMap){default:console.error("ChangeTableData | invalid value for chosenMap: "+chosenMap);return;case "Neuland":chosenArray=sc_NeulandSubsScor;break;case "Nordfels":chosenArray=sc_NordfelsSubs;break;case "Durststein":chosenArray=sc_DurststeinSubs;break;case "Durststein":chosenArray=sc_DurststeinSubs;break;case "Frostsee":chosenArray=sc_FrostseeSubsa;break;case "Uferwind":chosenArray=sc_UferWindSubs;break;case "Sturmklamm":chosenArray=sc_SturmklammSubs;break;case "Eternal trials":chosenArray=sc_etTrialsSubs;break;case "Eternal trials season 1":chosenArray=eTrialsS1Subs;console.log(chosenMap);break;case "Search":ShowLevelNameColumn();if(searchResultsSubs==null){console.error("ChangeTableData || searchResultsSubs is empty. Run SearchSubByName() first!");return}chosenArray=searchResultsSubs;break}let map=[];let position=[];let names=[];let score=[];let coins=[];let date=[];let mutators=[];let subID=[];let version=[];let usedWeapon=[];let subIndex=[];for(let i=0;i<chosenArray.length;i+=1){chosenRow=chosenArray[i];;map[i]=chosenRow[sc_levelColumn];position[i]=chosenRow[sc_positionColumn];names[i]=chosenRow[sc_nameColumn];score[i]=chosenRow[sc_scoreColumn];coins[i]=chosenRow[sc_goldColumn];date[i]=chosenRow[sc_userDateColumn];subID[i]=chosenRow[sc_subIDColumn];mutators[i]=chosenRow[sc_numOfMutsColumn];version[i]=chosenRow[sc_versionColumn];usedWeapon[i]=chosenRow[sc_weaponColumn];subIndex[i]=chosenRow[sc_sudIndexColumn]}const tMapName=document.getElementsByClassName("mapName ");const tPosition=document.getElementsByClassName("position");const tNames=document.getElementsByClassName("name");const tScore=document.getElementsByClassName("score");const tCoins=document.getElementsByClassName("coins");const tDate=document.getElementsByClassName("date");const tMutNums=document.getElementsByClassName("mutNums");const tVersion=document.getElementsByClassName("version");const tWeapon=document.getElementsByClassName("usedWeapon");let tableRows=document.getElementsByClassName("scoreTableRow");for(let i=0;i<tableRows.length;i+=1){tableRows[i].style.display="table-row"}for(let k=0;k<chosenArray.length;k+=1){tMapName[k].textContent=map[k];tPosition[k].textContent=position[k];tNames[k].textContent=names[k];tScore[k].textContent=SplitScore(score[k]);tCoins[k].textContent=coins[k];tMutNums[k].textContent=mutators[k];tDate[k].textContent=FormatSubmissionDate(date[k]);tVersion[k].textContent=FormatVersionNumber(version[k]);tWeapon[k].textContent=usedWeapon[k];tableRows[k].addEventListener("click",()=>{ShowSubInfo(subIndex[k])},false)}for(let i=chosenArray.length;i<tableRows.length;i+=1){tableRows[i].style.display="none"}document.getElementById("th-position").addEventListener("click",()=>{OrderBoardBy(level.toLowerCase(),"score")},false);document.getElementById("th-name").addEventListener("click",()=>{OrderBoardBy(level.toLowerCase(),"name")},false);document.getElementById("th-score").addEventListener("click",()=>{OrderBoardBy(level.toLowerCase(),"score")},false);document.getElementById("th-coins").addEventListener("click",()=>{OrderBoardBy(level.toLowerCase(),"gold")},false);document.getElementById("th-mutNums").addEventListener("click",()=>{OrderBoardBy(level.toLowerCase(),"mutators")},false);document.getElementById("th-usedWeapon").addEventListener("click",()=>{OrderBoardBy(level.toLowerCase(),"weapon")},false);document.getElementById("th-date").addEventListener("click",()=>{OrderBoardBy(level.toLowerCase(),"date")},false);document.getElementById("th-version").addEventListener("click",()=>{OrderBoardBy(level.toLowerCase(),"version")},false);document.getElementById("LBLoadingIndicator").style.display="none";document.getElementById("leaderboardContent").style.display="block";document.getElementById("searchResultsLegendText").style.display="none";document.getElementById("leaderboardNameText").textContent=chosenMap+" high-scores";if(chosenMap=="Search"){document.getElementById("searchResultsLegendText").style.display="block";document.getElementById("searchResultsLegendText").textContent="(O = Obsolete, R = Rejected)"}const mutatorColumn=document.getElementsByClassName("mutatorsColumn ");const weaponColumn=document.getElementsByClassName("weaponColumn");const goldColumn=document.getElementsByClassName("coinsColumn");if(chosenMap=="Neuland"){for(let i=0;i<mutatorColumn.length;i+=1){mutatorColumn[i].style.display="none"}for(let i=0;i<weaponColumn.length;i+=1){weaponColumn[i].style.display="none"}}else if(chosenMap=="Eternal trials"){for(let i=0;i<mutatorColumn.length;i+=1){mutatorColumn[i].style.display="none"}for(let i=0;i<weaponColumn.length;i+=1){weaponColumn[i].style.display="none"}for(let i=0;i<goldColumn.length;i+=1){goldColumn[i].style.display="none"}document.getElementById("leaderboardNameText").textContent="Eternal trials season 2 high-scores";}else if(chosenMap=="Eternal trials season 1"){for(let i=0;i<mutatorColumn.length;i+=1){mutatorColumn[i].style.display="none"}for(let i=0;i<weaponColumn.length;i+=1){weaponColumn[i].style.display="none"}for(let i=0;i<goldColumn.length;i+=1){goldColumn[i].style.display="none"}document.getElementById("leaderboardNameText").textContent=chosenMap+" high-scores";}else{for(let i=0;i<mutatorColumn.length;i+=1){mutatorColumn[i].style.display="table-cell"}for(let i=0;i<weaponColumn.length;i+=1){weaponColumn[i].style.display="table-cell"}for(let i=0;i<goldColumn.length;i+=1){goldColumn[i].style.display="table-cell"}}}let sortDown=true;function OrderBoardBy(map,orderType){let chosenMapArray=[];switch(map){default:console.error("OrderBoardBy | Invalid value for map! ("+map+")");return;case "neuland":chosenMapArray=sc_NeulandSubsScor;break;case "nordfels":chosenMapArray=sc_NordfelsSubs;break;case "durststein":chosenMapArray=sc_DurststeinSubs;break;case "frostsee":chosenMapArray=sc_FrostseeSubsa;break;case "uferwind":chosenMapArray=sc_UferWindSubs;break;case "sturmklamm":chosenMapArray=sc_SturmklammSubs;break;case "eternal trials":chosenMapArray=sc_etTrialsSubs;break;case "eternal trials season 1":chosenMapArray=eTrialsS1Subs;break;case "search":if(searchResultsSubs==null){console.error("ChangeTableData | searchResultsSubs is empty. Run SearchSubByName() first!");return}chosenMapArray=searchResultsSubs;break}let chosenRow;let chosenMutString;let chosenVerString;for(let i=0;i<chosenMapArray.length;i+=1){chosenRow=chosenMapArray[i];chosenMutString=chosenRow[sc_numOfMutsColumn].toLowerCase();chosenVerString=chosenRow[sc_versionColumn].toLowerCase();if(chosenMutString=="unknown"||chosenVerString=="unknown"){chosenRow[sc_numOfMutsColumn]=-1;chosenRow[sc_versionColumn]=-1}}switch(orderType){default:console.error("OrderBoardBy | Invalid value for orderType! "+orderType);return;case "score":chosenMapArray.sort((a,b)=>parseInt(b[sc_scoreColumn])-parseInt(a[sc_scoreColumn]));break;case "gold":chosenMapArray.sort((a,b)=>parseInt(b[sc_goldColumn])-parseInt(a[sc_goldColumn]));break;case "mutators":chosenMapArray.sort((a,b)=>parseInt(b[sc_numOfMutsColumn])-parseInt(a[sc_numOfMutsColumn]));break;case "version":chosenMapArray.sort((a,b)=>parseFloat(b[sc_versionColumn])-parseFloat(a[sc_versionColumn]));break;case "weapon":chosenMapArray.sort((a,b)=>{const weaponA=a[sc_weaponColumn].toUpperCase();const weaponB=b[sc_weaponColumn].toUpperCase();if(weaponA<weaponB){return -1}if(weaponA>weaponB){return 1}return 0});break;case "name":chosenMapArray.sort((a,b)=>{const nameA=a[sc_nameColumn].toUpperCase();const nameB=b[sc_nameColumn].toUpperCase();if(nameA<nameB){return -1}if(nameA>nameB){return 1}return 0});break;case "mapName":chosenMapArray.sort((a,b)=>{const mapA=a[sc_levelColumn].toUpperCase();const mapB=b[sc_levelColumn].toUpperCase();if(mapA<mapB){return -1}if(mapA>mapB){return 1}return 0});break;case "date":chosenMapArray.sort((a,b)=>{const dateA=a[sc_subDateColumn];const dateB=b[sc_subDateColumn];if(dateA>dateB){return -1}if(dateA<dateB){return 1}});break}for(let i=0;i<chosenMapArray.length;i+=1){chosenRow=chosenMapArray[i];chosenMutString=chosenRow[sc_numOfMutsColumn];chosenVerString=chosenRow[sc_versionColumn];if(chosenMutString=="-1"){chosenRow[sc_numOfMutsColumn]="unknown"}if(chosenVerString=="-1"){chosenRow[sc_versionColumn]="unknown"}}if(!sortDown){let oldArray=chosenMapArray;let newArray=[];let j=0;for(let i=oldArray.length-1;i>=0;i-=1){newArray[j]=oldArray[i];j+=1}chosenMapArray=newArray;}sortDown=!sortDown;let position=[];let names=[];let score=[];let coins=[];let date=[];let mutators=[];let subID=[];let version=[];let usedWeapon=[];let subIndex=[];for(let i=0;i<chosenMapArray.length;i+=1){chosenRow=chosenMapArray[i];;position[i]=chosenRow[sc_positionColumn];names[i]=chosenRow[sc_nameColumn];score[i]=chosenRow[sc_scoreColumn];coins[i]=chosenRow[sc_goldColumn];date[i]=chosenRow[sc_userDateColumn];subID[i]=chosenRow[sc_subIDColumn];mutators[i]=chosenRow[sc_numOfMutsColumn];version[i]=chosenRow[sc_versionColumn];usedWeapon[i]=chosenRow[sc_weaponColumn];subIndex[i]=chosenRow[sc_sudIndexColumn]}const tPosition=document.getElementsByClassName("position");const tNames=document.getElementsByClassName("name");const tScore=document.getElementsByClassName("score");const tCoins=document.getElementsByClassName("coins");const tDate=document.getElementsByClassName("date");const tMutNums=document.getElementsByClassName("mutNums");const tVersion=document.getElementsByClassName("version");const tWeapon=document.getElementsByClassName("usedWeapon");let tableRows=document.getElementsByClassName("scoreTableRow");for(let i=0;i<tableRows.length;i+=1){tableRows[i].style.display="table-row"}for(let k=0;k<chosenMapArray.length;k+=1){tPosition[k].textContent=position[k];tNames[k].textContent=names[k];tScore[k].textContent=SplitScore(score[k]);tCoins[k].textContent=coins[k];tMutNums[k].textContent=mutators[k];tDate[k].textContent=FormatSubmissionDate(date[k]);tVersion[k].textContent=FormatVersionNumber(version[k]);tWeapon[k].textContent=usedWeapon[k];tableRows[k].addEventListener("click",()=>{ShowSubInfo(subIndex[k])},false,)}for(let i=chosenMapArray.length;i<tableRows.length;i+=1){tableRows[i].style.display="none"}}